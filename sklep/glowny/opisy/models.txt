BaseUserManager -> klasa Django do niestandardowych menedzerów uzytkowania. Zawiera gotowe metody do tworzenia uzytkownika,
superusera i obslugi zwiazanej z uwierzytelnianiem opartych na AbstraBaseUser.
AbstraBaseUser -> klasa Django do niestandardowych modeli.
AbstractBaseUser jest używany do definiowania struktury i zachowania niestandardowego modelu użytkownika,
podczas gdy BaseUserManager jest używany do zarządzania tym modelem i dostarczania funkcji tworzenia użytkowników.
Oba te elementy są często używane razem, aby utworzyć niestandardowy system uwierzytelniania w Django.
PermissionsMixin -> dostarcza wiele pól i metod, które pozwalają na zarządzanie uprawnieniami użytkowników w Django.
Obejmuje to zarówno wbudowane uprawnienia, takie jak czy użytkownik jest superużytkownikiem,
jak i możliwość tworzenia własnych uprawnień na potrzeby konkretnej aplikacji.

self.model -> self słuzy do odwoływania się do artybutów i metod instancji wewnatrz klasy.
class MojaKlasa:
    def __init__(self, nazwa):
        self.nazwa = nazwa

    def wyswietl_nazwe(self):
        print(f"Nazwa klasy to: {self.nazwa}")

moj_obiekt = MojaKlasa("Przykład")
moj_obiekt.wyswietl_nazwe()

**kwargsy -> przekazywanie argumentow do funkcji w formie slownika, klucze to argumenty, a wartosci do wartosci.
Uzywamy gdy nie jesteśmy pewni ile argumentów bedzie przekazanych i obslugiwała rózne kombinacje argumentów.

def przykladowa_funkcja(**kwargs):
    for klucz, wartosc in kwargs.items():
        print(f"{klucz}: {wartosc}")

# Przykład wywołania funkcji z różnymi argumentami
przykladowa_funkcja(a=1, b=2, c=3)

# Możesz również przekazać pusty słownik
przykladowa_funkcja()

# Lub przekazać różne kombinacje argumentów
przykladowa_funkcja(x=10, y=20, z=30, name="John")


