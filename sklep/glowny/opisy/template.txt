base.html

{% %} -> tagi do szablonów, do wstawania dynamiczny danych
{% for cos in cos %} {% endfor %} -> pętla for
{% if request.user.is_authenticated %} {% else %} {% endif %} -> ify
{% block %} {% endblock %} -> block do nadpisywania szablonow np base.html w innych templates
{% include %} -> polaczenie innego szablonów do innego.

{% load static %} -> tag, słuzy do załadowania plików statycznych
w tym przypadku fontawesomefree, ktore laduja rozne css

<nav> - navbar
py -padding lewo/prawo
px -padding gora/dol
flex -model ukladu w css pozwala na uzycie justify-between, items-center
justify-between -elementy po obu stronach, rownomiernie
items-center -wysrodkowanie elementow
border-b -dodanie dolnej krawedzi do elementu
border-gray-200 -kolor obramowania - liczba to odcień

text-lg -wielkośc teksu
bg-green-500 -tło danego elementu
text-white -kolor tekstu
rounded-xl -zaokraglenie naroznika elementu, tutaj akurat przycisk
hover: -kolor po najebaniu myszka
font-semibold - tekst pogrubiony

{% if request.user.is_authenticated %} - jezeli jest zalogowany
{% url '' % } - uzycie url i widoku -> zapisane w urls.py

login.html

Formularz POST -> odczytanie danych przeslane przez formularz i przetworzenie wg widoku/views
{% csrf_token %} -> zabezpieczenie przed atakami CSRF
Atak ma na celu skłonić użytkownika zalogowanego do serwisu internetowego do tego, aby uruchomił on odnośnik,
którego otwarcie wykona w owym serwisie akcję, do której atakujący nie miałby w przeciwnym razie dostępu. Na przykład, użytkowniczka Małgosia,
na stałe zalogowana do forum internetowego, może w pewnym momencie otworzyć spreparowany przez Jasia link,
który zmieni jej dane kontaktowe albo usunie wątek dyskusji. Jako link może również posłużyć obrazek, którego adres został odpowiednio przygotowany,
a konsekwencje wykonanej akcji mogą być znacznie poważniejsze.

